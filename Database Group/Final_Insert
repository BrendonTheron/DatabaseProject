CREATE TABLE ACCESSIBILITY(
    ACCESS_ID NUMBER NOT NULL, --PK
    ACCESS_REQ_COMMENT VARCHAR2(200),
    ACCESS_ALLERGY VARCHAR2(200),
    CONSTRAINT PK_ACCESS_ID PRIMARY KEY (ACCESS_ID) --PK
);

CREATE TABLE SEMESTER(
    SEM_ID VARCHAR2(10), --PK
    SEM_START_DATE DATE,
    SEM_END_DATE DATE,
    CONSTRAINT PK_SEM_ID PRIMARY KEY (SEM_ID) --PK
);

CREATE TABLE STAFF (
    STAFF_ID NUMBER NOT NULL,  -- PK
    STAFF_FNAME VARCHAR2(20) CONSTRAINT NN_STAFF_FNAME NOT NULL,
    STAFF_LNAME VARCHAR2(20) CONSTRAINT NN_STAFF_LNAME NOT NULL,
    STAFF_DOB DATE CONSTRAINT NN_STAFF_DOB NOT NULL,
    STAFF_PHONE, NUMBER(10) NOT NULL

    STAFF_ADDR_CITY VARCHAR2(100) CONSTRAINT NN_STAFF_ADDR_CITY NOT NULL,
    STAFF_ADDR_SUBURB VARCHAR2(100) CONSTRAINT NN_STAFF_ADDR_SUBURB NOT NULL,
    STAFF_ADDR_STREET VARCHAR2(100) CONSTRAINT NN_STAFF_ADDR_STREET NOT NULL,
    STAFF_ADDR_ZIP NUMBER(4) CONSTRAINT NN_STAFF_ADDR_ZIP NOT NULL,
    STAFF_SEX VARCHAR2(10) CONSTRAINT NN_STAFF_SEX NOT NULL, -- WITH OPTION FOR "RATHER NOT SAY"
    CONSTRAINT PK_STAFF PRIMARY KEY (STAFF_ID))
;

CREATE TABLE STAFF_HISTORY (
    STAFF_ID NUMBER NOT NULL,  -- PK+FK REFERENCE STAFF TABLE
    STAFF_START DATE NOT NULL,  -- PK
    STAFF_END DATE,  -- NULLABLE ALLOWING FOR ONGOING POSITIONS
    STAFF_INT_PH, NUMBER(10) NOT NULL
    STAFF_POSITION VARCHAR2(20) CONSTRAINT NN_STAFF_POSITION NOT NULL,
    STAFF_LOCATION VARCHAR2(20) CONSTRAINT NN_STAFF_LOCATION NOT NULL,
    DEPT_ID NUMBER(10),  -- FK REFERENCE DEPT, nullable
    CONSTRAINT PK_STAFF_HISTORY PRIMARY KEY (STAFF_ID, STAFF_START),
    CONSTRAINT FK_STAFF_HISTORY_STAFF FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID)
);

CREATE TABLE HALL_BUILDING (
    HALL_NAME VARCHAR2(15) NOT NULL,  --PK
    STAFF_ID NUMBER NOT NULL,  --FK
    HALL_BUILDING_ID NUMBER NOT NULL,
    HALL_STREET VARCHAR2(50) NOT NULL,
    HALL_CITY VARCHAR2(50) NOT NULL,
    HALL_ZIP VARCHAR2(10) NOT NULL,
    HALL_AREA_CODE VARCHAR2(5) NOT NULL,
    HALL_PHONE NUMBER NOT NULL, 
    CONSTRAINT PK_HALL_BUILDING PRIMARY KEY (HALL_NAME),  --PK
    CONSTRAINT FK_HALL_BUILDING_STAFF FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID)
);

CREATE TABLE UNIT_BUILDING (
    UNIT_BUILDING_ID NUMBER NOT NULL, --PK
    UNIT_BUILDING_STREET VARCHAR2(50) NOT NULL, 
    UNIT_BUILDING_CITY VARCHAR2(50) NOT NULL,
    UNIT_BUILDING_ZIP VARCHAR2(50) NOT NULL,
    CONSTRAINT PK_UNIT_BUILDING PRIMARY KEY (UNIT_BUILDING_ID)  --PK
);

CREATE TABLE FLAT_BUILDING (
    FLAT_BUILDING_ID NUMBER NOT NULL, --PK
    FLAT_BUILDING_STREET VARCHAR2(50) NOT NULL, 
    FLAT_BUILDING_CITY VARCHAR2(50) NOT NULL,
    FLAT_BUILDING_ZIP VARCHAR2(50) NOT NULL,
    FLAT_BUILDING_AREA_CODE VARCHAR2(5) NOT NULL,
    FLAT_BUILDING_PHONE NUMBER NOT NULL,
    CONSTRAINT PK_FLAT_BUILDING PRIMARY KEY (FLAT_BUILDING_ID)  --PK
);

CREATE TABLE DIET (
    HALL_ROOM_DIET VARCHAR2(50), --PK
    VEGAN CHAR(1) CHECK (VEGAN IN ('Y', 'N')) NOT NULL, 
    DAIRY_FREE CHAR(1) CHECK (DAIRY_FREE IN ('Y', 'N')) NOT NULL, 
    GLUTEN_FREE CHAR(1) CHECK (GLUTEN_FREE IN ('Y', 'N')) NOT NULL, 
    VEGETARIAN CHAR(1) CHECK (VEGETARIAN IN ('Y', 'N')) NOT NULL, 
    NA CHAR(1) CHECK (NA IN ('Y', 'N')) NOT NULL,
    CONSTRAINT PK_DIET PRIMARY KEY (HALL_ROOM_DIET) --PK
);

CREATE TABLE DEGREE (
    DEG_ID NUMBER(10) NOT NULL,  -- PK
    DEPT_ID NUMBER(10) NOT NULL,  -- FK REFERENCE DEPT TABLE
    DEG_TITLE VARCHAR2(100) NOT NULL,  
    STAFF_ID NUMBER(20) NOT NULL,  -- FK REFERENCE STAFF TABLE   
    CONSTRAINT PK_DEGREE PRIMARY KEY (DEG_ID),
    CONSTRAINT FK_DEGREE_DEPT FOREIGN KEY (DEPT_ID) REFERENCES DEPT(DEPT_ID),
    CONSTRAINT FK_DEGREE_STAFF FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID)
);

CREATE TABLE STUDENT (
    STU_ID NUMBER NOT NULL,  -- PK
    STU_FNAME VARCHAR2(50) NOT NULL,
    STU_LNAME VARCHAR2(50) NOT NULL,
    STU_STREET VARCHAR2(100) NOT NULL,
    STU_CITY VARCHAR2(50) NOT NULL,
    STU_ZIP VARCHAR2(10) NOT NULL, 
    STU_DOB DATE NOT NULL,  
    STU_GENDER VARCHAR2(20),  -- GENDER (CAN 'PREFER NOT TO SAY')
    STU_SEX VARCHAR2(20) NOT NULL, --SEX (CAN 'PREFER NOT TO SAY')
    STU_NATIONALITY VARCHAR2(50) NOT NULL,
    STU_STATUS VARCHAR2(10) CHECK (STU_STATUS IN ('PLACED', 'WAITING')) NOT NULL,  --BOOLEAN 
    STU_SMOKER CHAR(1) CHECK (STU_SMOKER IN ('T', 'F')) NOT NULL,  -- BOOLEAN T/F
    ACCESS_ID NUMBER,  -- ACCESSIBILITY REQUIREMENTS    
    DEGREE_ID NUMBER(10),  -- FK REFERENCE DEGREE TABLE
    STAFF_ID NUMBER(20),  -- FK REFERENCE STAFF TABLE
    MOVEIN_DATE DATE,  -- FK REFERENCE LEASE TABLE
    MOVEOUT_DATE DATE,  -- FK REFERENCE LEASE TABLE
    CONSTRAINT PK_STUDENT PRIMARY KEY (STU_ID),
    CONSTRAINT FK_STUDENT_ACCESSIBILITY FOREIGN KEY (ACCESS_ID) REFERENCES ACCESSIBILITY(ACCESS_ID),
    CONSTRAINT FK_STUDENT_DEGREE FOREIGN KEY (DEGREE_ID) REFERENCES DEGREE(DEGREE_ID),
    CONSTRAINT FK_STUDENT_STAFF FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID)
);

CREATE TABLE NEXT_KIN (
    KIN_ID NUMBER NOT NULL,  -- PK
    STU_ID NUMBER NOT NULL,  -- FK REFERENCE STUDENT TABLE
    KIN_FNAME VARCHAR2(50) NOT NULL,
    KIN_LNAME VARCHAR2(50) NOT NULL,
    KIN_RELATIONSHIP VARCHAR2(50) NOT NULL,
    KIN_PHONE VARCHAR2(15),  
    KIN_EMAIL VARCHAR2(100),  
    CONSTRAINT PK_NEXT_KIN PRIMARY KEY (KIN_ID),
    CONSTRAINT FK_NEXT_KIN_STUDENT FOREIGN KEY (STU_ID) REFERENCES STUDENT(STU_ID),
    CONSTRAINT CK_KIN_PHONE_OR_EMAIL CHECK (KIN_PHONE IS NOT NULL OR KIN_EMAIL IS NOT NULL)
);

REATE TABLE INVOICE (
    INV_ID NUMBER NOT NULL, -- PK
    LEASE_ID NUMBER NOT NULL, -- PK+FK REFERENCE LEASE TABLE
    INV_SEM VARCHAR(6) CONSTRAINT NN_INV_SEM NOT NULL,
    INV_DUE DATE CONSTRAINT NN_INV_DUE NOT NULL,
    CONSTRAINT PK_INVOICE PRIMARY KEY (INV_ID, LEASE_ID),
    CONSTRAINT FK_INVOICE_LEASE FOREIGN KEY (LEASE_ID) REFERENCES LEASE(LEASE_ID)
);

CREATE TABLE UNIT (
    UNIT_ID NUMBER NOT NULL,  -- PK
    UNIT_FURNISHED CHAR(1) CHECK (UNIT_FURNISHED IN ('Y', 'N')) NOT NULL,  -- BOOLEAN TRUE/FALSE
    UNIT_RENT DECIMAL(10, 2) NOT NULL,  
    UNIT_ISAVAIL CHAR(1) CHECK (UNIT_ISAVAIL IN ('Y', 'N')) NOT NULL, 
    UNIT_BUILDING_ID NUMBER NOT NULL, -- FK 
    CONSTRAINT PK_UNIT PRIMARY KEY (UNIT_ID),
    CONSTRAINT FK_UNIT_UNIT_BUILDING FOREIGN KEY (UNIT_BUILDING_ID) REFERENCES UNIT_BUILDING(UNIT_BUILDING_ID),
    CONSTRAINT CHK_UNIT CHECK(UNIT_ID <=12)
);

CREATE TABLE MEMBER (
    MEM_ID NUMBER NOT NULL,  -- PK
    MEM_FNAME VARCHAR2(20) CONSTRAINT NN_MEM_FNAME NOT NULL,
    MEM_LNAME VARCHAR2(20) CONSTRAINT NN_MEM_LNAME NOT NULL,
    MEM_SEX VARCHAR2(10) CONSTRAINT NN_MEM_SEX NULL, 
    MEM_DOB DATE CONSTRAINT NN_MEM_DOB NOT NULL,  
    MEM_PHONE VARCHAR2(15),
    MEM_EMAIL VARCHAR2(50), 
    UNIT_ID NUMBER NOT NULL,  -- FK 
    CONSTRAINT PK_MEMBER PRIMARY KEY (MEM_ID),
    CONSTRAINT FK_MEMBER_UNIT FOREIGN KEY (UNIT_ID) REFERENCES UNIT(UNIT_ID),
    CONSTRAINT FK_MEMBER_PHONE_EMAIL CHECK (MEM_PHONE IS NOT NULL OR MEM_EMAIL IS NOT NULL)
);

CREATE TABLE FLAT (
    FLAT_ID NUMBER NOT NULL,  -- PK
    FLAT_BUILDING_ID NUMBER NOT NULL, --FK 
    CONSTRAINT PK_FLAT PRIMARY KEY (FLAT_ID),  --PK
    CONSTRAINT FK_FLAT_FLAT_BUILDING FOREIGN KEY (FLAT_BUILDING_ID) REFERENCES FLAT_BUILDING(FLAT_BUILDING_ID)
);

CREATE TABLE FLAT_ROOM (
    FLAT_ROOM_ID NUMBER NOT NULL, --PK
    FLAT_ID NUMBER NOT NULL, --FK 
    FLAT_ROOM_RENT DECIMAL(10, 2) NOT NULL,
    FLAT_ROOM_ISAVAIL CHAR(1) CHECK (FLAT_ROOM_ISAVAIL IN ('Y', 'N')) NOT NULL, --BOOLEAN
    CONSTRAINT PK_FLAT_ROOM PRIMARY KEY (FLAT_ROOM_ID),   --PK
    CONSTRAINT FK_FLAT_ROOM_FLAT FOREIGN KEY (FLAT_ID) REFERENCES FLAT(FLAT_ID)  --FK TO FLAT
);

CREATE TABLE HALL (
    HALL_ID NUMBER NOT NULL,  --PK
    HALL_NAME NUMBER NOT NULL,  --FK
    CONSTRAINT PK_HALL_ID PRIMARY KEY (HALL_ID)
    CONSTRAINT FK_HALL_HALL_BUILDING FOREIGN KEY (HALL_NAME) REFERENCES HALL_BUILDING(HALL_NAME)  --FK TO HALL_BUILDING
);

CREATE TABLE HALL_ROOM (
    HALL_ROOM_ID NUMBER NOT NULL,           --PK1
    HALL_ID NUMBER NOT NULL,                --FK1
    HALL_ROOM_RENT DECIMAL(10, 2) NOT NULL,
    HALL_ROOM_DIET VARCHAR2(20),            --FK2
    HALL_ROOM_ISAVAIL CHAR(1) CHECK (HALL_ROOM_ISAVAIL IN ('Y', 'N')) NOT NULL,
    ACCESS_ID NUMBER NOT NULL,    --FK3
    CONSTRAINT PK_HALL_ROOM PRIMARY KEY (HALL_ROOM_ID),          --PK
    CONSTRAINT FK_HALL_ROOM_HALL FOREIGN KEY (HALL_ID) REFERENCES HALL(HALL_ID), --FK TO HALL
    CONSTRAINT FK_DIET_HALL_ROOM FOREIGN KEY (HALL_ROOM_DIET) REFERENCES DIET(HALL_ROOM_DIET), --FK TO DIET
    CONSTRAINT FK_HALL_ACCESSIBILITY FOREIGN KEY (ACCESS_ID) REFERENCES ACCESS_REQ(ACCESS_ID)  --FK TO ACCESSIBILITY 
);

CREATE TABLE ACCOMMODATION (
    ACCOM_REF_ID VARCHAR2(10) NOT NULL,  -- PK
    HALL_ROOM_ID NUMBER, --FK 
    FLAT_ROOM_ID NUMBER, --FK 
    UNIT_ID NUMBER, --FK 
    ACCOM_OWNED VARCHAR2(1) CHECK (ACCOM_OWNED IN ('Y', 'N')) NOT NULL,  -- BOOLEAN YES/NO 
    ACCOM_RENT DECIMAL(10, 2) NOT NULL,  
    CONSTRAINT PK_ACCOMMODATION PRIMARY KEY (ACCOM_REF_ID), 
    CONSTRAINT FK_ACCOMMODATION_HALL_ROOM FOREIGN KEY (HALL_ROOM_ID) REFERENCES HALL_ROOM(HALL_ROOM_ID),  
    CONSTRAINT FK_ACCOMMODATION_FLAT_ROOM FOREIGN KEY (FLAT_ROOM_ID) REFERENCES FLAT_ROOM(FLAT_ROOM_ID),  
    CONSTRAINT FK_ACCOMMODATION_UNIT FOREIGN KEY (UNIT_ID) REFERENCES UNIT(UNIT_ID)
);

CREATE TABLE LEASE (
    LEASE_ID NUMBER NOT NULL, -- PK
    LEASE_RENT NUMBER(10,2) NOT NULL, 
    LEASE_START VARCHAR2(50) CONSTRAINT NN_LEASE_START NOT NULL,
    LEASE_END VARCHAR2(50) CONSTRAINT NN_LEASE_END NOT NULL
    ACCOM_ID NUMBER NOT NULL, -- FK
    STU_ID NUMBER NOT NULL, -- FK
    CONSTRAINT PK_LEASE PRIMARY KEY (LEASE_ID),
    CONSTRAINT FK_LEASE_ACCOMMODATION FOREIGN KEY (ACCOM_ID) REFERENCES ACCOMMODATION(ACCOM_ID)
    CONSTRAINT FK_LEASE_STUDENT FOREIGN KEY (STU_ID) REFERENCES STUDENT(STU_ID)
    CONSTRAINT FK_LEASE_START_SEMESTER FOREIGN KEY (LEASE_START) REFERENCES SEMESTER(SEM_ID)
    CONSTRAINT FK_LEASE_END_SEMESTER FOREIGN KEY (LEASE_END) REFERENCES SEMESTER(SEM_ID)
    
);

CREATE TABLE INSPECTION (
    INSP_ID NUMBER NOT NULL,  -- PK
    ACCOM_ID NUMBER NOT NULL,  -- FK REFERENCE ACCOMMODATION TABLE
    STAFF_ID NUMBER NOT NULL,  -- FK REFERENCE STAFF TABLE
    INSP_DATE DATE CONSTRAINT NN_INSP_DATE NOT NULL,
    INSP_RESULT CHAR(1) CHECK (INSP_RESULT IN ('Y', 'N')) NOT NULL,  -- BOOLEAN TRUE/FALSE
    INSP_COMMENT VARCHAR2(50), -- NULLABLE
    CONSTRAINT PK_INSPECTION PRIMARY KEY (INSP_ID, ACCOM_ID, STAFF_ID),
    CONSTRAINT FK_INSPECTION_STAFF FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID),
    CONSTRAINT FK_INSPECTION_ACCOM FOREIGN KEY (ACCOM_ID) REFERENCES ACCOMMODATION(ACCOM_ID)
    
);

COMMIT;
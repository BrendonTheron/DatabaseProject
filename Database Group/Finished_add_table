--ONLY PK TABLES

CREATE TABLE ACCESSABILITY(
    ACCESS_ID NUMBER NOT NULL, --PK
    ACCESS_REQ_COMMENT VARCHAR2(200),
    ACCESS_ALLERGIES VARCHAR2(200),
    CONSTRAINT PK_ACCESS_ID PRIMARY KEY (ACCESS_ID) --PK
);

CREATE TABLE SEMESTER(
    SEM_ID NUMBER, --PK
    SEM_START_DATE DATE,
    SEM_END_DATE DATE,
    CONSTRAINT PK_SEM_ID PRIMARY KEY (SEM_ID) --PK
);

CREATE TABLE UNIT_BUILDING (
    UNIT_BUILDING_ID NUMBER NOT NULL, --PK
    UNIT_BUILDING_STREET VARCHAR2(50) NOT NULL, 
    UNIT_BUILDING_CITY VARCHAR2(50) NOT NULL,
    UNIT_BUILDING_ZIP VARCHAR2(50) NOT NULL,
    CONSTRAINT PK_UNIT_BUILDING PRIMARY KEY (UNIT_BUILDING_ID)  --PK
);

CREATE TABLE FLAT_BUILDING (
    FLAT_BUILDING_ID NUMBER NOT NULL, --PK
    FLAT_BUILDING_STREET VARCHAR2(50) NOT NULL, 
    FLAT_BUILDING_CITY VARCHAR2(50) NOT NULL,
    FLAT_BUILDING_ZIP VARCHAR2(50) NOT NULL,
    CONSTRAINT PK_FLAT_BUILDING PRIMARY KEY (FLAT_BUILDING_ID)  --PK
);

CREATE TABLE STAFF (
    STAFF_ID NUMBER NOT NULL,  -- PK
    STAFF_FNAME VARCHAR2(20) CONSTRAINT NN_STAFF_FNAME NOT NULL,
    STAFF_LNAME VARCHAR2(20) CONSTRAINT NN_STAFF_LNAME NOT NULL,
    STAFF_ADDRESS VARCHAR2(100) CONSTRAINT NN_STAFF_ADDRESS NOT NULL,  
    STAFF_SEX VARCHAR2(10) CONSTRAINT NN_STAFF_SEX NOT NULL, -- WITH OPTION FOR "RATHER NOT SAY"
    CONSTRAINT PK_STAFF PRIMARY KEY (STAFF_ID))
;

-- ONE FK TABLES

CREATE TABLE DEGREE (
    DEG_ID NUMBER(10) NOT NULL,  -- PK
    DEPT_ID NUMBER(10) NOT NULL,  -- FK REFERENCE DEPT TABLE
    DEG_TITLE VARCHAR2(100) NOT NULL,  
    STAFF_ID NUMBER(20) NOT NULL,  -- FK REFERENCE STAFF TABLE
    STAFF_START DATE NOT NULL,  -- FK REFERENCE STAFF_HISTORY TABLE
    CONSTRAINT PK_DEGREE PRIMARY KEY (DEG_ID),
    CONSTRAINT FK_DEGREE_DEPT FOREIGN KEY (DEPT_ID) REFERENCES DEPT(DEPT_ID),
    CONSTRAINT FK_DEGREE_STAFF FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID),
    CONSTRAINT FK_DEGREE_STAFF_START FOREIGN KEY (STAFF_ID, STAFF_START) REFERENCES STAFF_HISTORY(STAFF_ID, STAFF_START)
);

CREATE TABLE NEXT_KIN (
    KIN_ID NUMBER(10) NOT NULL,  -- PK
    STU_ID NUMBER(10) NOT NULL,  -- FK REFERENCE STUDENT TABLE
    KIN_FNAME VARCHAR2(50) NOT NULL,
    KIN_LNAME VARCHAR2(50) NOT NULL,
    KIN_RELATIONSHIP VARCHAR2(50) NOT NULL,
    KIN_PHONE VARCHAR2(15),  
    KIN_EMAIL VARCHAR2(100),  
    CONSTRAINT PK_NEXT_KIN PRIMARY KEY (KIN_ID),
    CONSTRAINT FK_NEXT_KIN_STUDENT FOREIGN KEY (STU_ID) REFERENCES STUDENT(STU_ID),
    CONSTRAINT CK_KIN_PHONE_OR_EMAIL CHECK (KIN_PHONE IS NOT NULL OR KIN_EMAIL IS NOT NULL) -- MAKE IT THAT THEY CAN EITHER GIVE EMAIL OR PHONE NUM
);

CREATE TABLE DEPT (
    DEPT_ID NUMBER(10) NOT NULL,  -- PK
    DEPT_NAME VARCHAR2(100) CONSTRAINT NN_DEPT_NAME NOT NULL,
    CONSTRAINT PK_DEPT PRIMARY KEY (DEPT_ID)
);

CREATE TABLE INVOICE_LINE (
    INV_ID NUMBER NOT NULL,  -- FK REFERENCE INVOICE TABLE
    INV_LINE_ID NUMBER NOT NULL,  -- PK
    INV_PAID_DATE DATE, -- NULLABLE
    INV_PAID_AMT NUMBER NOT NULL,
    INV_METHOD VARCHAR2(10), -- NULLABLE
    INV_REMIND1 DATE CONSTRAINT NN_INV_REMIND1 NOT NULL,
    INV_REMIND2 DATE, -- NULLABLE
    CONSTRAINT PK_INVOICE_LINE PRIMARY KEY (INV_ID, INV_LINE_ID),
    CONSTRAINT FK_INVOICE_LINE_INV FOREIGN KEY (INV_ID) REFERENCES INVOICE (INV_ID)
    CONSTRAINT CHK_INV_PAID_DATE_METHOD CHECK (
        (INV_PAID_DATE IS NULL AND INV_METHOD IS NULL) OR
        (INV_PAID_DATE IS NOT NULL AND INV_METHOD IS NOT NULL)))
;

CREATE TABLE INVOICE (
    INV_ID NUMBER CONSTRAINT NOT NULL, -- PK
    LEASE_ID NUMBER NOT NULL, -- PK+FK REFERENCE LEASE TABLE
    INV_SEM NUMBER CONSTRAINT NN_INV_SEM NOT NULL,
    INV_DUE DATE CONSTRAINT NN_INV_DUE NOT NULL,
    CONSTRAINT PK_INVOICE PRIMARY KEY (INV_ID, LEASE_ID),
    CONSTRAINT FK_INVOICE_LEASE FOREIGN KEY (LEASE_ID) REFERENCES LEASE(LEASE_ID))
;

CREATE TABLE UNIT (
    UNIT_ID NUMBER NOT NULL,  -- PK
    UNIT_FURNISHED CHAR(1) CHECK (UNIT_FURNISHED IN ('Y', 'N')) NOT NULL,  -- BOOLEAN TRUE/FALSE
    UNIT_RENT DECIMAL(10, 2) NOT NULL,  
    UNIT_ISAVAIL CHAR(1) CHECK (UNIT_ISAVAIL IN ('Y', 'N')) NOT NULL, 
    UNIT_BUILDING_ID NUMBER NOT NULL, -- FK 
    CONSTRAINT PK_UNIT PRIMARY KEY (UNIT_ID),
    CONSTRAINT FK_UNIT_UNIT_BUILDING FOREIGN KEY (UNIT_BUILDING_ID) REFERENCES UNIT_BUILDING(UNIT_BUILDING_ID)
);

CREATE TABLE MEMBER (
    MEM_ID NUMBER NOT NULL,  -- PK
    MEM_FNAME VARCHAR2(20) CONSTRAINT NN_MEM_FNAME NOT NULL,
    MEM_LNAME VARCHAR2(20) CONSTRAINT NN_MEM_LNAME NOT NULL,
    MEM_SEX VARCHAR2(10) CONSTRAINT NN_MEM_SEX NULL, 
    MEM_DOB DATE CONSTRAINT NN_MEM_DOB NOT NULL,  
    MEM_PHONE VARCHAR2(15),
    MEM_EMAIL VARCHAR2(50), 
    UNIT_ID NUMBER NOT NULL,  -- FK 
    CONSTRAINT PK_MEMBER PRIMARY KEY (MEM_ID),
    CONSTRAINT FK_MEMBER_UNIT FOREIGN KEY (UNIT_ID) REFERENCES UNIT(UNIT_ID),
    CONSTRAINT FK_MEMBER_PHONE_EMAIL CHECK (MEM_PHONE IS NOT NULL OR MEM_EMAIL IS NOT NULL)  -- MAKE IT THAT THEY CAN EITHER GIVE EMAIL OR PHONE NUM
);

CREATE TABLE FLAT (
    FLAT_ID NUMBER NOT NULL,  -- PK
    FLAT_BUILDING_ID NUMBER NOT NULL, --FK 
    CONSTRAINT PK_FLAT PRIMARY KEY (FLAT_ID),  --PK
    CONSTRAINT FK_FLAT_FLAT_BUILDING FOREIGN KEY (FLAT_BUILDING_ID) REFERENCES FLAT_BUILDING(FLAT_BUILDING_ID) --FK TO FLAT_BUILDING
);

CREATE TABLE FLAT_ROOM (
    FLAT_ROOM_ID NUMBER NOT NULL,  --PK
    FLAT_ID NUMBER NOT NULL, --FK
    FLAT_ROOM_RENT DECIMAL(10, 2) NOT NULL,
    FLAT_ROOM_ISAVAIL CHAR(1) CHECK (FLAT_ROOM_ISAVAIL IN ('Y', 'N')) NOT NULL,
    CONSTRAINT PK_FLAT_ROOM PRIMARY KEY (FLAT_ROOM_ID),   --PK
    CONSTRAINT FK_FLAT_ROOM_FLAT FOREIGN KEY (FLAT_ID) REFERENCES FLAT(FLAT_ID)  --FK TO FLAT
);    

CREATE TABLE HALL (
    HALL_ID NUMBER NOT NULL,  --PK
    HALL_NAME NUMBER NOT NULL,  --FK
    CONSTRAINT FK_HALL_HALL_BUILDING FOREIGN KEY (HALL_NAME) REFERENCES HALL_BUILDING(HALL_NAME)  --FK TO HALL_BUILDING
);

CREATE TABLE DIET (
    HALL_ROOM_DIET VARCHAR2(50), --PK
    VEGAN CHAR(1) CHECK (VEGAN IN ('Y', 'N')) NOT NULL, 
    DAIRY_FREE CHAR(1) CHECK (DAIRY_FREE IN ('Y', 'N')) NOT NULL, 
    GLUTEN_FREE CHAR(1) CHECK (GLUTEN_FREE IN ('Y', 'N')) NOT NULL, 
    VEGETARIAN CHAR(1) CHECK (VEGETARIAN IN ('Y', 'N')) NOT NULL, 
    NA CHAR(1) CHECK (NA IN ('Y', 'N')) NOT NULL,
    CONSTRAINT PK_DIET PRIMARY KEY (HALL_ROOM_DIET)--PK
);

CREATE TABLE HALL_BUILDING (
    HALL_NAME VARCHAR2(15) NOT NULL,  --PK
    STAFF_ID NUMBER NOT NULL,  --FK
    HALL_STREET VARCHAR2(50) NOT NULL,
    HALL_CITY VARCHAR2(50) NOT NULL,
    HALL_ZIP VARCHAR2(10) NOT NULL,
    HALL_AREA_CODE VARCHAR2(5) NOT NULL,
    HALL_PHONE NUMBER NOT NULL, 
    CONSTRAINT PK_HALL PRIMARY KEY (HALL_NAME),  --PK
    CONSTRAINT FK_HALL_STAFF FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID)  --FK TO STAFF
);

CREATE TABLE STAFF_HISTORY (
    STAFF_ID NUMBER NOT NULL,  -- PK+FK REFERENCE STAFF TABLE
    STAFF_START DATE NOT NULL,  -- PK
    STAFF_END DATE,  -- NULLABLE ALLOWING FOR ONGOING POSITIONS
    STAFF_POSITION VARCHAR2(20) CONSTRAINT NN_STAFF_POSITION NOT NULL,
    STAFF_LOCATION VARCHAR2(20) CONSTRAINT NN_STAFF_LOCATION NOT NULL,
    DEPT_ID VARCHAR2(50),  -- FK REFERECE DEPT, nullable
    CONSTRAINT PK_STAFF_HISTORY PRIMARY KEY (STAFF_ID, STAFF_START),
    CONSTRAINT FK_STAFF_HISTORY_STAFF FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID),
    CONSTRAINT FK_STAFF_HISTORY_DEPT FOREIGN KEY (DEG_DEPT) REFERENCES DEPT(DEPT_ID))
;

--2+ FKS

CREATE TABLE STUDENT (
    STU_ID NUMBER NOT NULL,  -- PK
    STU_FNAME VARCHAR2(50) NOT NULL,
    STU_LNAME VARCHAR2(50) NOT NULL,
    STU_STREET VARCHAR2(100) NOT NULL,
    STU_CITY VARCHAR2(50) NOT NULL,
    STU_ZIP VARCHAR2(10) NOT NULL, 
    STU_DOB DATE NOT NULL,  
    STU_GENDER VARCHAR2(10),  -- GENDER/SEXUALITY
    STU_SEX VARCHAR2(10) CHECK (STU_SEX IN ('MALE', 'FEMALE')) NOT NULL,  -- BIOLOGICAL SEX + IS BOOLEAN
    STU_NATIONALITY VARCHAR2(50) NOT NULL,
    STU_STATUS VARCHAR2(10) CHECK (STU_STATUS IN ('PLACED', 'WAITING')) NOT NULL,  --BOOLEAN 
    STU_SMOKER CHAR(1) CHECK (STU_SMOKER IN ('T', 'F')) NOT NULL,  -- BOOLEAN T/F
    ACCESS_ID VARCHAR2(100),  -- ACCESSABILITY REQUIREMENTS
    STU_ADDITONAL_COMMENTS NUMBER, 
    DEGREE_ID NUMBER(10),  -- Fk REFERENCE DEGREE TABLE
    STAFF_ID NUMBER(20),  -- FK REFERENCE STAFF TABLE
    MOVEIN_DATE DATE,  -- FK REFERENCE LEASE TABLE
    MOVEOUT_DATE DATE,  -- FK REFERENCE LEASE TABLE
    CONSTRAINT PK_STUDENT PRIMARY KEY (STU_ID),
    CONSTRAINT FK_ACCESS_ID FOREIGN KEY (ACCESS_ID) REFERENCE ACCESSABILITY(ACCESS_ID)
    CONSTRAINT FK_STUDENT_DEGREE FOREIGN KEY (DEGREE_ID) REFERENCES DEGREE(DEGREE_ID),
    CONSTRAINT FK_STUDENT_STAFF FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID),
    CONSTRAINT FK_STUDENT_MOVEIN FOREIGN KEY (MOVEIN_DATE) REFERENCES LEASE(MOVEIN_DATE),
    CONSTRAINT FK_STUDENT_MOVEOUT FOREIGN KEY (MOVEOUT_DATE) REFERENCES LEASE(MOVEOUT_DATE)
);

CREATE TABLE LEASE (
    LEASE_ID NUMBER NOT NULL, -- PK
    LEASE_RENT NUMBER(10,2) NOT NULL, 
    LEAS_START DATE CONSTRAINT NN_LEASE_START NOT NULL,
    LEASE_END DATE CONSTRAINT NN_LEASE_END NOT NULL
    ACCOM_ID NUMBER NOT NULL, -- FK
    STU_ID NUMBER NOT NULL, -- FK
    CONSTRAINT PK_LEASE PRIMARY KEY (LEASE_ID),
    CONSTRAINT FK_LEASE_ACCOMMODATION FOREIGN KEY (ACCOM_ID) REFERENCES ACCOMMODATION(ACCOM_ID)
    CONSTRAINT FK_LEASE_STUDENT FOREIGN KEY (STU_ID) REFERENCES STUDENT(STU_ID)
);

CREATE TABLE HALL_ROOM (
    HALL_ROOM_ID NUMBER NOT NULL,           --PK1
    HALL_ID NUMBER NOT NULL,                --FK1
    HALL_ROOM_RENT DECIMAL(10, 2) NOT NULL,
    HALL_ROOM_DIET VARCHAR2(20),            --FK2
    HALL_ROOM_ISAVAIL CHAR(1) CHECK (HALL_ROOM_ISAVAIL IN ('Y', 'N')) NOT NULL,
    ACCESS_REQ_ID NUMBER NOT NULL,    --FK3
    CONSTRAINT PK_HALL_ROOM PRIMARY KEY (HALL_ROOM_ID),          --PK
    CONSTRAINT FK_HALL_ROOM_HALL FOREIGN KEY (HALL_ID) REFERENCES HALL(HALL_ID), --FK TO HALL
    CONSTRAINT FK_DIET_HALL_ROOM FOREIGN KEY (HALL_ROOM_DIET) REFERENCES DIET(HALL_ROOM_DIET), --FK TO DIET
    CONSTRAINT FK_HALL_ACCESS_REQ FOREIGN KEY (ACCESS_REQ_ID) REFERENCES ACCESS_REQ(ACCESS_REQ_ID)  --FK TO ACCESS_REQ
    );

CREATE TABLE ACCOMMODATION(
    ACCOM_ID NUMBER,  --PK
    HALL_ROOM_ID NUMBER, --FK
    FLAT_ROOM_ID NUMBER, --FK
    UNIT_ID NUMBER, --FK
    CONSTRAINT PK_ACCOM_ID PRIMARY KEY (ACCOM_ID),
    CONSTRAINT FK_HALL_ROOM FOREIGN KEY (HALL_ROOM_ID) REFERENCES HALL_ROOM(HALL_ROOM_ID), --FK TO HALL_ROOM
    CONSTRAINT FK_FLAT_ROOM FOREIGN KEY (FLAT_ROOM_ID) REFERENCES FLAT_ROOM(FLAT_ROOM_ID), --FK TO FLAT_ROOM
    CONSTRAINT FK_UNIT FOREIGN KEY (UNIT_ID) REFERENCES UNIT(UNIT_ID), --FK TO UNIT
);
